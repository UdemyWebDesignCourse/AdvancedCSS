    In css +Y move down -Y moves up
    +X moves from left to right, -X goes left
It start in the upper left corner of the element. 
================================================================================
 @ 95vh: means at all times the height of the box or 
    element should be at 95 % of the view port height.
    If you put 100 it would allways be 100 percent & the same
    height of the view port at all times. 
    @ cover: whatever the width of the viewport or the element 
    it will always try to fit the element intisde of the box
    
    @clip-path: will clip at what coordianates x y(episonem) will 
    be visible starting at top left and working clockwise topright,
    bottom right, bottom left. 
        - There is a program called clipy and it has predefined shapes with 
        the corilated clip-path coordinates for various shapes at 
            https://bennettfeely.com/clippy/
=====================================================================================
        Positioning - Absolute Relative  fixed & block
    * In a lot of cases theres no need to specify the width. The height just needs to be 
    known and the width is automatically adjusted. If you only put the width then the 
    height would be automatically adjusted

Relative - Gets positioned by specifiying top left right or bottom in px, vh, or % from 
    where ever the last element was positioned 

Absolute - Needs to have a parent element that has its position set to Relative a position 
for it to start the measurements from. Whatever parent element wrapped in divs that has
relative set will become the absolute origin for the child element.

Block - elements take up as much width as they can. Are positioned one after another. They can also provide 
    line breaks after each block.

===========================================================
    h1 & span
h1 tags are inportant for search engines because they use that information
in h1 tags to say what the title should be. When using span within a
h1 tag or any other tag, it enables us to style that part of the heeading differently
so we can different sizes all while still desplaying what the heading should say for search engiens.

span elements by default are an inline element which is similar to text. One after another. 

when positioning a text box and trying to place it in the center, important to rember that
the left side is what will be aligned with position coordianates. To make up for that extra
space you should use transform: translate(-50%, -50%); will make up for the difference in space & minus
that elements extra space
=================================================================================
    Animation
Use @keyframe{ 0%{} 100%{}}
- For browser optimization it is best to only ever
animate opacity & transform: translate()x|y because it are those that all browser known
- You need to specify: 
    animation-name: keyFrameAnimationName 
    animation-duration: 3s;
    ---------------------------------------More animation functions
    animation-timing-function: is for built in functions that change the pace over time depending on the function used
        - ease-in - will start slower & turn faster over time
        - ease-out - will start faster & turn slower by end
    -----------------------------------------------------------------------------
    backface-visibility: hidden 
        - Will keep the whole element from shaking & makes for nice smooth transistions
        - Good for 3d animations where the background needs to be hidden                                                                                                                                                                                                                                                                  
=========================================================================================================
    HOW DO YOU KNOW WHAT AN INLINE ELEMENT IS:
In HTML, inline elements are those which only occupy the space bounded by the tags defining the element, instead of breaking the flow of the content.
You can always tell an inline element because An inline element does not start on a new line and only takes up as much width as necessary
Inline elements are treated as if it is text
    For inline elements you should do display: inline-block to display the inline element as if the element was a normal block element
=======================================================================================
        Margin properties is best for when you need whitespace
================================================================================================
    CSS Best practices
    - Responsive design
        - Fluid layout, Media queries
        - Responsive images
        - Correct units 
        - Desktop first vs. mobile first
    - Maintanable and Scalable code
        - Clean easy to understand code
        - Reusable organized files and classes
    - Web performance
        - Less HTTP request
        - Biggest impact on performance is to reduce amount of images
        - Use CSS preprocessor  
        - Compress images
==========================================================================================================================
    CSS Behind the scene
> Loads HTML -----------> Loads Document Object Model(DOM)
> Parses HTML -> Loads CSS -> Resolves CSS conflicts between browsers & devices to process final CSS values so it can Load the CSS object Model (CSSOM)
> Document Object Model & CSS Object Model come together to form a render tree of parents & siblings
> Website renders visual formating model 
> Final rendered website 
==============================================================
Cascade: Process of combining different stylesheets and resolving conflicts 
between different css rules and declarations, when more than one rule applies to a certain element

Importance  - > Specify -> Source Order
    * When the cascade finds conflicts it has 5 ranked important signs it looks for
Importance
1. User !important declarations : First important
2. Author !important declarations : Second important
3. Author declarations
4. User declarations
5. Default browser declarations : Last important

When there is conflicting delcarations with the same importance it then goes by specificity
Specificity
1. Inline styles
2. IDs
3. Classes, speduo-classes, attribute
4. Elements, pseudo-elements

Example of which the cascade will chose
.button {
    font-size: 20px;
    color: white;
    background-color: blue;    Inline IDs Clsses Elements
}                                 0,   0,   1,    0
nav#nav div.pull-right .button {
    background-color: green;
}                                 0,   1,   2,    2 ----> Green background will be chosen
a {
    background-color: purple;
}                                 0,   0,   0,    1
#nav a.button:hover {
    background-color: yellow;
}                                 0,   1,   2,    1

If there is a tie between two or more css declarations then the last declaration written is the one applied

The universal selector * has no specificity value (0,0,0,0) which means all other specificities will override *
Rely mor on specificity than on the order of selectors
But rely on order when using 3rd-party stylesheets so that your author stylesheet is last
REM size is always relevent to the default browser font-size which is 16 so
1.5rem * 16px is 24px;
==================================================================================================
            inheritance
With inheritance the final cascade value that every CSS property must have gets computed with its
final value. This way text & all other responsive calculations are easier to maintain.
.parent{
  font-size: 20px;
  line-height: 150%;  //150% of n/20 which is 30px
}
.child{
   font-size: 25px;
}
the computed value here is 150% of 20 which is 30px 150/100 */* CF/20 = 30px for the child font inheritance
properties related to text are what get inherited font-family, font-size, color.
    *- inheritance only works if no-one else declares a value for that propertie
    *- The inheritance keyword forces inheritances on a certain property.
    *- The initial keyword can be used to reset a property to its initial value.
When the line-height is increased in % it puts the parent and child further away  & 
when the line-height is decreased in % it puts the parent child closer together

rem is controlled by the root font-size measured in px. 
Root font-size is the only one that will recieve px all other will be rem measurement.
html{
    font-size: 10px; // The document root font-size only one to be px
}
.parent{
  font-size: 20px; 20 px gets converted to 2rem
  line-height: 150%;  //150% of n/20 which is 30px
}
.child{
   font-size: 25px; //25px get converted to 2.5rem because 25/10 is 2.5rem 1rem is 10px
}

The problem when using rem with a px for font-size is that it is a bad practice because it is
making your website inaccessible to screen readers or other folks who change their default font size
It will just be your root font-size only and not responsive to other with custom font-sizes. So it must be a percentage. 

When font-size is at 100% the root font-size is 16px. So to find out what percentage we want for the 10px font-size we do 10/16 = 0.625 so 62% should be the root -fontsize;
    - For screen readers & other browser that have their own cutsom default font size setting, to find
    what the root font-size will be we multiply our root % font-size with their browser's font-size to get what the new root font-size will be
        - eg: 62% is .62 * UsrFntSz = document's root font-size
        - eg: .62*20px = 12.4px - New document root fon't size from a 20px customized browser font'szise
Difference between em & rem
em(fonts) use the parent of the current element as a reference 
em(length) use current element as reference
rem use the root font size as reference for both fonts and lengths
    When its em measurements
with em it not only depends on the root font-size but the parent font-size as well


